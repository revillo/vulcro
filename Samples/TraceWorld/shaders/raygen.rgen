#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#include "common.h"

layout (set = 0, binding = 1) uniform accelerationStructureNV RayScene;
layout (set = 0, binding = 2, rgba8) uniform image2D RayImage;


layout (set = 0, binding = 0) uniform GlobalData{
  
  Globals g;
  
} uGlobals;

#define GLOBALS uGlobals.g

layout(location = RAY_LOCATION) rayPayloadNV RayPayload PrimaryRay;

void main() {

    PrimaryRay.color = vec3(0.0, 0.0, 0.0);
    PrimaryRay.hitDistance = 0.0;
  
    vec3 origin = GLOBALS.camera[3].xyz;
    //vec3 direction = (uGlobals.camera * vec4(normalize(vec3(uv - vec2(0.5), 1.0)), 0.0)).xyz;
    vec2 uv = gl_LaunchIDNV.xy / vec2(gl_LaunchSizeNV.xy - 1);
    
    float ar = float(gl_LaunchSizeNV.x) / gl_LaunchSizeNV.y;
    float fov = 1.0;
    
    vec2 projTarget = uv - vec2(0.5);
    projTarget.x *= ar;
    
    vec3 direction = normalize(vec3(projTarget, 1.0));
    
    direction = (GLOBALS.camera * vec4(direction, 0.0)).xyz;
    
    const uint rayFlags = gl_RayFlagsCullFrontFacingTrianglesNV;
    const uint cullMask = 0xFF;
    
    float tmin = 0.0;
    float tmax = 200.0;
      
    traceNV(
       RayScene,
       rayFlags,
       cullMask,
       0,//record offset
       1,//record stride
       0,//miss index
       origin,
       tmin,
       direction,
       tmax,
        RAY_LOCATION
    );

    imageStore(RayImage, ivec2(gl_LaunchIDNV.xy), vec4(PrimaryRay.color, 1.0));
    
}